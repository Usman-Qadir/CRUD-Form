@page
@model IndexModel
@{
    ViewData["Title"] = "Home page";
}

<style>
    body {
        background-color: blue;
        background-image: url(https://images.unsplash.com/photo-1526256262350-7da7584cf5eb?q=80&w=2070&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D);
    }

    .card-header {
        width: 100%;
        background-color: #0a4a5b;
        color: white;
        display: flex;
        align-items: center;
        justify-content: space-between;
        padding: 2px;
        border-radius: 5px;
        cursor: pointer;
    }

    .form-control, .form-select {
        border-radius: 10px;

        height: 30px;
    }

        .form-control:focus, .form-select:focus {
            border: 1px solid red;
            box-shadow: 0 0 5px red;
        }
</style>
<div>
    <div class="card">
        <div class="card-header">
            <h3 class=" section-header ">Basic Information</h3>
            <i class="fa-solid fa-minus fa-lg"></i>
        </div>

        <div class="card-body">
            <form method="post" id="form1">

                <fieldset class="mb-2">
                    <div class="row">
                        <h6 class="col-md-1 mb-3">Name</h6>
                        <div class="col-md-3 mb-3">
                            <input type="text" class="form-control" id="firstName" min="3" pattern="[A-Za-z]+" title="Only Alphabets and spaces allowed" placeholder="Patient's First Name" required>
                            <div class="error-message" id="firstNameError"></div>
                        </div>
                        <div class="col-md-3 mb-3">
                            <input type="text" class="form-control" id="middleName" pattern="[A-Za-z ]*" title="Only alphabets and spaces allowed" placeholder="Patient's Middle Name">
                        </div>
                        <div class="col-md-3 mb-3">
                            <input type="text" class="form-control" id="lastName" pattern="[A-Za-z ]+" title="Only alphabets and spaces allowed" placeholder="Patient's Last Name" required>
                            <div class="error-message" id="lastNameError"></div>
                        </div>
                    </div>
                </fieldset>


                <fieldset class="mb-2">
                    <div class="row">
                        <h6 class="col-md-1 mb-3">Relation</h6>
                        <div class="col-md-3 mb-3">
                            <select class="form-select">
                                <option value=""></option>
                                <option>Mother</option>
                                <option>Father</option>
                                <option>Brother</option>
                                <option>Sister</option>
                            </select>
                        </div>
                        <div class="col-md-3 mb-3">
                            <input type="text" class="form-control" placeholder="Relation's First Name" required>
                        </div>
                        <div class="col-md-3 mb-3">
                            <input type="text" class="form-control" placeholder="Relation's Last Name" required>
                        </div>

                    </div>
                </fieldset>



                <fieldset class="mb-1">
                    <div class="row">
                        <h6 class="col-md-1 mb-3">Gender</h6>
                        <div class="col-md-1 mb-3">
                            <select class="form-select">
                                <option value=""></option>
                                <option>Male</option>
                                <option>Female</option>
                                <option>Other</option>
                            </select>
                        </div>
                        <h6 class="col-md-1 mb-3">DOB</h6>
                        <div class="col-md-2 mb-3">
                            <input type="date" class="form-control" id="DOB" required>
                            <div class="error-message" id="dobError"></div>
                        </div>
                        <h6 class="col-md-1 mb-3">Age</h6>
                        <div class="col-md-1 mb-3">
                            <input type="text" class="form-control" id="ageMonth" placeholder="Month">
                        </div>
                        <div class="col-md-1 mb-3">
                            <input type="text" class="form-control" id="ageDay" placeholder="Day">
                        </div>

                        <div class="col-md-1 mb-3">
                            <input type="text" class="form-control" id="ageYear" placeholder="Year">
                        </div>
                        <h6 class="col-md-1 mb-3">Spousal</h6>
                        <div class="col-md-2 mb-3">
                            <select class="form-select">
                                <option value=""></option>
                                <option>Yes</option>
                                <option>No</option>
                            </select>
                        </div>
                    </div>
                </fieldset>

                <fieldset>
                    <div class="row">
                        <h6 class="col-md-1">CNIC</h6>
                        <div class="col-md-2 mb-3">
                            <input type="text" class="form-control" id="cnic" title="Format: 1234512345671" placeholder="XXXXXXXXXXXXX" required>
                            <div class="error-message" id="cnicError"></div>
                        </div>
                        <h6 class="col-md-1">Owner</h6>
                        <div class="col-md-2">
                            <select class="form-select">
                                <option value=""></option>
                                <option>Self</option>
                                <option>Father</option>
                                <option>Mother</option>

                            </select>
                        </div>
                        <h6 class="col-md-1">Cell#</h6>
                        <div class="col-md-2 mb-3">
                            <input type="text" class="form-control" id="cellNumber" title="Format: 1234-1234567" placeholder="XXXX-XXXXXXX" required>
                            <div class="error-message" id="cellNumberError"></div>
                        </div>
                        <h6 class="col-md-1">Cell Owner</h6>
                        <div class="col-md-2 mb-3">
                            <input type="text" class="form-control" id="cellOwner" required>
                            <div class="error-message" id="cellOwnerError"></div>
                        </div>

                    </div>
                </fieldset>

                <div class="row">
                    <h6 class="col-md-1 mb-3">Dept</h6>
                    <div class="col-md-2 mb-3">
                        <select class=" form-select " id="department" placeholder="Department" required>
                            <option value=""></option>
                            <option>Cardiology</option>
                            <option>Neurology</option>
                            <option>Orthopedics</option>
                            <option>Dermatology</option>
                        </select>

                    </div>
                </div>



                <div class="col-6">
                    <button class="btn btn-primary" type="submit">Submit form</button>
                    <button class="btn btn-primary" type="button" id="downloadJsonBtn">Download JSON</button>
                </div>

            </form>
        </div>
    </div>
</div>



@section Scripts {
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script>
        $(document).ready(function () {
            $(".card-header").click(function () {
                $(".card-body").slideToggle();
                $(this).find("i").toggleClass("fa-minus fa-plus");
            });

            function calculateAgeFromDOB(dob) {
                let birthDate = new Date(dob);
                let today = new Date();
                let years = today.getFullYear() - birthDate.getFullYear();
                let months = today.getMonth() - birthDate.getMonth();
                let days = today.getDate() - birthDate.getDate();

                if (days < 0) {
                    months--;
                    days += new Date(today.getFullYear(), today.getMonth(), 0).getDate();
                }
                if (months < 0) {
                    years--;
                    months += 12;
                }

                $("#ageYear").val(years);
                $("#ageMonth").val(months);
                $("#ageDay").val(days);
            }

            function calculateDOBFromAge() {
                let years = parseInt($("#ageYear").val()) || 0;
                let months = parseInt($("#ageMonth").val()) || 0;
                let days = parseInt($("#ageDay").val()) || 0;

                let today = new Date();
                let dob = new Date(today);

                dob.setFullYear(dob.getFullYear() - years);
                dob.setMonth(dob.getMonth() - months);
                dob.setDate(dob.getDate() - days);

                $("#DOB").val(dob.toISOString().split("T")[0]);
            }

            $("#DOB").change(function () {
                calculateAgeFromDOB($(this).val());
            });

            $("#ageYear, #ageMonth, #ageDay").on("input", function () {
                calculateDOBFromAge();
            });

            function validateNameInput(inputField, errorField) {
                let value = $(inputField).val();
                let cleanedValue = value.replace(/[^A-Za-z ]/g, '');
                $(inputField).val(cleanedValue);

                if (cleanedValue.length > 0) {
                    let capitalized = cleanedValue.toLowerCase()
                        .split(' ')
                        .map(word => word.charAt(0).toUpperCase() + word.slice(1))
                        .join(' ');
                    $(inputField).val(capitalized);
                }
            }

            $("#firstName, #middleName, #lastName").on("input", function () {
                validateNameInput(this, `#${$(this).attr("id")}Error`);
            });

            $("#cnic").on("input", function () {
                let rawValue = $(this).val().replace(/\D/g, '');
                rawValue = rawValue.substring(0, 13);
                $(this).val(rawValue);

                $("#cnicError").text(
                    rawValue.length !== 13 ? "CNIC must be exactly 13 digits" : ""
                ).css("color", "red");
            });

            $("#cellNumber").on("input", function () {
                let rawValue = $(this).val().replace(/\D/g, '');
                rawValue = rawValue.substring(0, 11);
                $(this).val(rawValue);

                if (rawValue.length !== 11) {
                    $("#cellNumberError").text("Cell number must be exactly 11 digits").css("color", "red");
                } else if (!rawValue.startsWith("03")) {
                    $("#cellNumberError").text("Must start with 03").css("color", "red");
                } else {
                    $("#cellNumberError").text("");
                }
            });



                    //  Form submission handler
        $("#form1").on("submit", function (event) {
            event.preventDefault(); // Prevent default form submission

            //  Check if there are any visible validation errors
            let hasErrors = $(".error-message").toArray().some(el => $(el).text().trim() !== "");
            if (hasErrors) {
                alert("Please fix the errors before submitting.");
                return; // Exit if there are validation errors
            }

            //  Collect form field values into an object
            const formData = {
                firstName: $("#firstName").val(),
                middleName: $("#middleName").val(),
                lastName: $("#lastName").val(),
                cnic: $("#cnic").val(),
                cellNumber: $("#cellNumber").val(),
                cellOwner: $("#cellOwner").val(),
                dob: $("#DOB").val(),
                department: $("#department").val()
            };

            //  Create a unique key using CNIC and department
            const key = `${formData.cnic}_${formData.department}`;

            //  Retrieve existing entries from localStorage (if any)
            let existingData = JSON.parse(localStorage.getItem("formEntries")) || {};

            //  Save or update the entry in localStorage
            existingData[key] = formData;
            localStorage.setItem("formEntries", JSON.stringify(existingData));

            alert("Form data saved locally!");

            //  Reset the form after saving
            $("#form1")[0].reset();
        });

        //  Download stored data as JSON file
        $("#downloadJsonBtn").on("click", function () {
            // 📤 Get stored entries from localStorage
            const entries = JSON.parse(localStorage.getItem("formEntries")) || {};

            //  If no data exists, show message and stop
            if (Object.keys(entries).length === 0) {
                alert("No data available to download.");
                return;
            }

            //  Create a downloadable JSON file
            const blob = new Blob([JSON.stringify(entries, null, 2)], { type: "application/json" });
            const url = URL.createObjectURL(blob);

            //  Trigger file download
            const a = document.createElement("a");
            a.href = url;
            a.download = "form-entries.json";
            a.click();

            //  Clean up object URL
            URL.revokeObjectURL(url);
        });

        });
    </script>
}
